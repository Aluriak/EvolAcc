# EvolAcc Project Definition
## First words

This document describes some ideas about __EvolAcc__ project of life simulator, designed 
for be a sandbox for artificial life. What is life, 
what are genes,... All theses definitions belong to next part.

EvolAcc have a strong emphasis on modularity : the code is heavily modular,
and designed for terminal or final GUI users, and for 
integration inside Python projects, just like a Python module.

Tools involved (or that will be involved someday): 

- __Python 3__ for main code; 
- __C/C++__ for optimizations;
- __Qt__ for GUI; 
- __ncurses__ for terminal GUI;
- __git__ for version managing, through [github](http://github.com/aluriak/EvolAcc);
- __virtualenv__ for environnement management;
- __graphviz__ for graph printing;

Python 3 is mainly battery included, but some *pip installable* modules can be necessary. 
(notabily for argument parsing, automatic JIT compilation,...)




## Units, Componants
Unit is a composite of Componant objects, and represent a unit of life
(if have a Genome in its componants), or an environment property.

When a Unit is asked to step, it receive the Simulation as a context of runtime, 
and is allowed to add actions objects to it.



## Actions
A Simulation have a list of actions, mainly created by Units and that represents 
treatments on the Simulation.
According to Command Pattern, these actions are added by Units and invoked by Simulation on itself.

This system allow all Unit to scan the same world before act on it. 
Because of python way, nothing prevent user to modify Simulation directly ; 
in fact, this is not forbidden, just not recommended.



## Simulation
Simulation is the name given to the module that will initialize the world and run it.
Its a low-level interface, easily manipulated by EvolAcc object.
Its this object that will be passed to Units when step method is called.
It provides lots of methods for access data in the more generalist way.



## Factories
Factory object is a creator of Units. Designed by user, 
Factory the main object that describes its will.

Many Factories can be used for a single Simulation, and each of them will be asked for creation.





## Objectives for version __0.1.0__
- __[X] Primary tools__ must be fonctionnal, notabily for UML and documentation production;
- __[X] Arch__ of core modules and git repository must be created;
- __[X] Simple__ Environment with very simple and useless life should be runnable;
- __[X] Observer__ of Environment that simply show in console a view of Life;



## Objectives for version __0.2.0__









## Improvements for next versions

Main goals of next versions. Feasibility is considered OK and next updates can bring some of theses improvements.

- __Genome__ integration of both Static and Dynamic Genome;
- __Property__ for allow definitions of environmental pressure and gradient of parameter;



Planned functionnality. Maybe in a long time, but its something we want to see.

- __Quantity__: each unit of Life have an amount of each elements (Energy, sugar,...) and can, by use of function, collect, transform and drop elements in Environnement; 
- __Transposons__: a not translated word of vocabulary in DNA can be recognize by special objects, like plasmids, that inserts themselves inside the sequence;
In result, we have modifications of genomes and transmission of plasmids;
- __Viruses__ like transposons but for both Dynamic and Static Genome. Simply consider adding of Genome componant to already Genome possessor. Stranger DNA can be added to any life;
- __DataSystem__ EvolAcc Observer, designed for save and load Environment, Life configuration,… ;
- __Phylogenient__ EvolAcc Observer that creat a phylogenetic tree according to real evenments;
- __Phylogenius__ EvolAcc Observer that creat a phylogenetic tree according to final data, with bioinformatics methods;
- __GUI__ for final users, in Qt and/or ncurses;



Some ideas that need to be studied, not expected before many updates.

- __Telemetrox__ EvolAcc Observer that print data of current step in a webpage; 







## Tools

Lots of modules, libraries,… can be used for EvolAcc and its observers.
This section will certainly be quickly updated.

EvolAcc:  
- [docopt](https://docopt.org), for command-line arguments parsing;  





## Versionning

Use of SemVer versionning naming.  
_EvolAcc_ is the name of the project and of the final program.
Each major version will have a name, taked from a famous biologist.  
Moreover, each minor version will have a codename, based on amino-acid.
  
Beta's name is __Mendel__.  
Mendel's first version, *0.1.0*, have the name __Alanine__.






## Coding conventions

All python code must follow the [PEP 8 recommendations](https://www.python.org/dev/peps/pep-0008/)
as possible, and according to the case, some deviations are allowed.
Objectives of conventions are __code clarity and uniformization__, not a PEP 8 inconditionnal respect. 

Important points of coding conventions :  

-  4 spaces by indentation;  
-  snake case for methods, functions, variables and modules;  
-  camel case for class names;  
-  upper case for constants;  













