# HOWÂ TO
This file describes things that can be performed with __EvolAcc 0.1.0__.  
So, this is something like a usecase tutorial, for final users and for developpers !


## Add a new program option
Many options already exists, like *--factory*, *--help* or *--interactive*.
For add a new option, the developper need to:
- add new option in *__main__.py* docstring, according to [docopt](http://docopt.org/ ) syntax;
- add constant name in *config* module (like *UNIVERSE\_SIZE* for example) with associated key;
  
Some things may be necessary, according to what is the option goal:
- if it need to be casted in a particular format, *__normalized* and *__converted* functions must be completed;
- if a default value exist, then it add to be put in *__default_configuration* function;
- if needed, add manually the field to the config file, or use *--save_config* flag for erase and rewrite it;
  
This done, the remain work is to use it !  


## Create a new simulation 
Just launch EvolAcc create and run a new Simulation, but the goal of this part is to show what things need to be done for provide new Simulation patterns.  
Firstly, the principle and goals of Simulation must be determined. *Two species coevolves and each represents the K/r strategy ; 
which will be the most adaptated to a (un)stable world ?*, *A eat B, B eat C and C eat A ; is it possible to find rules that describes evolution of this world ?*, 
or others *in a world with poles and equator, is a speciation possible ?*.
  
For do that, its necessary to create a package in *evolacc/userdata/simulations/* repertory. 
This package must describes at least one function called *create_configuration*, that return a dictionnary that contain parameters of the simulation.
This function can easily be define in the *__init__.py* file, where some imports can be performed.
Stupid example that run an empty simulation:

        from evolacc.config import UNIVERSE_SIZE, STEPS_AT_START

        def create_configuration():
            return {}
                UNIVERSE_SIZE  : [20,20],
                STEPS_AT_START : 150,
            }

More interesting one:

        from evolacc.config  import UNIVERSE_SIZE, FACTORY_CLASSES, STEPS_AT_START
        from evolacc.factory import FactoryExample

        def create_configuration():
            return {}
                UNIVERSE_SIZE  : [20,20],
                FACTORY_CLASSES: [FactoryExample],
                STEPS_AT_START : 150,
            }

Others examples can be found in *evolacc/userdata/simulations/* repertory.
Once the simulation package is defined, EvolAcc can be launched:

        python -m evolacc --universe_size=100,100 --simulations=MySimulationPackage --step_at_start=1000 --watchers=AGlobalWatcher1,AGlobalWatcher2


## Determine priority of configurations
Configuration of simulation package have an higher priority than command line arguments, 
that have itself an higher priority than configuration file, 
that have itself an higher priority than default configuration hardcoded in config module.

So, a simulation have a total control on how its used by EvolAcc.


## Game of Life in universe of 100 by 100 for 100 phases
The Conway's Game of Life is a very simple cellular automaton, 
and reproduce its behavior is always fun.  
In EvolAcc, it can be design like this:
- a cell is a Unit with a Custom Genome that contain, mainly, a state (alive or dead);
- an UnitFactory will be designed for create alive or dead cell according to a density;
- the FunctionCall Action will be used for implementation of state switching; 
- a watcher that print alive and dead cells;

All these things are already implemented in simulation *gol*, that can be find in *evolacc/userdata/simulations/gol/* repertory.
Developpers are encouraged to take a look to these classes before code their own simulation.  
So, launch a Game of Life for 100 phases and in a world of 100 by 100 can be performed by:

        python -m evolacc --simulations=gol --universe_size=100,100 --step_at_start=100


